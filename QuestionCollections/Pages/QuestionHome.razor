@page "/questions"
@inject NavigationManager NavigationManager
@inject QuestionService QuestionService
@inject CategoryService CategoryService

<h3>Questions</h3>

<!-- Form for adding and editing questions -->
<EditForm Model="question" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="questionName">Question Header:</label>
        <InputText id="questionName" @bind-Value="question.Name" class="form-control" />
    </div>
    <div class="mt-3">
        <label for="questionBody">Question Body:</label>
        <RadzenHtmlEditor @bind-Value=@question.Body style="height: 450px;" Input=@OnInput Change=@OnChange Paste=@OnPaste UploadComplete=@OnUploadComplete Execute=@OnExecute UploadUrl="upload/image" />
    </div>
    <div class="mt-3">
        <label for="explanation">Explanation:</label>
        <InputTextArea row="10" id="explanation" @bind-Value="question.Explanation" class="form-control" />
    </div>
    <div class="mt-3">
        <label for="categoryId">Category:</label>
        <InputSelect id="categoryId" @bind-Value="question.CategoryId" class="form-control">
            <option value="">-- Select a Category --</option>
            @foreach (var cat in categories)
            {
                <option value="@cat.Id">@cat.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => question.CategoryId)" />
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary">@((isEditMode) ? "Update" : "Add") Question</button>
        <button type="button" class="btn btn-secondary" @onclick="ClearForm">Cancel</button>
    </div>
</EditForm>

<hr />

<!-- List of Questions -->
@if (questions != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>@nameof(question.Name)</th>
                <th>Category</th>
                <th>Choices</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var q in questions)
            {
                <tr>
                    <td>@q.Id</td>
                    <td>@q.Name</td>
                    <td>@q.Category.Name</td>
                    <td>@q.Choices.Count</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditQuestion(q.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteQuestion(q.Id)">Delete</button>
                        <button class="btn btn-info" @onclick="() => GoToChoices(q.Id)">Manage Choices</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Question> questions = new ();
    private List<Category> categories = new();
    private Question question = new Question();
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestions();
        categories = await CategoryService.GetCategoriesAsync();
    }

    private async Task LoadQuestions()
    {
        questions = await QuestionService.GetQuestionsAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditMode)
        {
            await QuestionService.UpdateQuestionAsync(question);
        }
        else
        {
            await QuestionService.AddQuestionAsync(question);
        }

        await LoadQuestions();
        ClearForm();
    }

    private void ClearForm()
    {
        question = new Question();
        isEditMode = false;
    }

    private async Task EditQuestion(int id)
    {
        question = await QuestionService.GetQuestionByIdAsync(id);
        isEditMode = true;
    }

    private async Task DeleteQuestion(int id)
    {
        await QuestionService.DeleteQuestionAsync(id);
        await LoadQuestions();
    }

    private void GoToChoices(int questionId)
    {
        // Navigate to Choices page for the question
        NavigationManager.NavigateTo($"/choices/{questionId}");
    }


    



    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }

    void OnInput(string html)
    {
        Console.WriteLine($"Input: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");
    }

    void OnUploadComplete(UploadCompleteEventArgs args)
    {
        Console.WriteLine($"Upload complete: {args.RawResponse}");
    }

    
}
