@page "/questions"
@using QuestionCollections.Component
@inject NavigationManager NavigationManager
@inject QuestionService QuestionService
@inject CategoryService CategoryService

<h3>Questions</h3>

<!-- Form for adding and editing questions -->
<button class="btn btn-primary" @onclick="()=> GoToEditQuestion(0)">Add New Question</button>

<hr />

<!-- List of Questions -->
@if (questions != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Header</th>
                <th>Category</th>
                <th>Is High yield</th>
                <th>Choices</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var q in questions)
            {
                <tr>
                    <td>@q.Id</td>
                    <td>@q.Name</td>
                    <td>@q.Category.Name</td>
                    <td>@q.HighYield</td>
                    <td>@q.Choices.Count</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => GoToEditQuestion(q.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteQuestion(q.Id)">Delete</button>
                        <button class="btn btn-info" @onclick="() => GoToChoices(q.Id)">Manage Choices</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Question> questions = new ();
    private List<Category> categories = new();
    private Question question = new Question();
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestions();
        categories = await CategoryService.GetCategoriesAsync();
    }

    private async Task LoadQuestions()
    {
        questions = await QuestionService.GetQuestionsAsync();
    }

   

    private void ClearForm()
    {
        question = new Question();
        isEditMode = false;
    }

    private async Task EditQuestion(int id)
    {
        question = await QuestionService.GetQuestionByIdAsync(id);
        isEditMode = true;
    }

    private async Task DeleteQuestion(int id)
    {
        await QuestionService.DeleteQuestionAsync(id);
        await LoadQuestions();
    }

    private void GoToChoices(int questionId)
    {
        // Navigate to Choices page for the question
        NavigationManager.NavigateTo($"/choices/{questionId}");
    }


    private void GoToEditQuestion(int questionId)
    {
        // Navigate to Choices page for the question
        NavigationManager.NavigateTo($"/questions/Edit/{questionId}");
    }   
    

    public void Dispose()
    {        
      QuestionService.Dispose();
      CategoryService.Dispose();        
    }

    
}
