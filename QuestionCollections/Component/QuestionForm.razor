@page "/Questions/Edit/{QuestionId:int}"
@inject NavigationManager NavigationManager
@inject CategoryService CategoryService
@inject QuestionService QuestionService

<EditForm Model="question" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="QuestionName">Question Header:</label>
        <InputText id="QuestionName" @bind-Value="question.Name" class="form-control" />
    </div>
    <div class="mt-3">
        <label for="QuestionBody">Question Body:</label>
        <RadzenHtmlEditor @bind-Value=@question.Body style="height: 450px;" Input=@OnInput Change=@OnChange Paste=@OnPaste UploadComplete=@OnUploadComplete Execute=@OnExecute UploadUrl="upload/image" />
    </div>
    <div class="mt-3">
        <label for="explanation">Explanation:</label>
        <RadzenHtmlEditor @bind-Value=@question.Explanation style="height: 450px;" Input=@OnInput Change=@OnChange Paste=@OnPaste UploadComplete=@OnUploadComplete Execute=@OnExecute UploadUrl="upload/image" />
    </div>
    <div>
        <label for="IsHighYield">Is High yield:</label>
        <InputCheckbox id="IsHighYield" @bind-Value="question.HighYield" />
    </div>
    <div class="mt-3">
        <label for="categoryId">Category:</label>
        <InputSelect id="categoryId" @bind-Value="question.CategoryId" class="form-control">
            <option value="">-- Select a Category --</option>
            @foreach (var cat in categories)
            {
                <option value="@cat.Id">@cat.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => question.CategoryId)" />
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary">@(QuestionId == 0 ?  "Add Question" :  "Update Question")</button>
    </div>
</EditForm>


@code {
    [Parameter] public int QuestionId { get; set; } = new();
    [Parameter] public List<Category> categories { get; set; } = new();
    private Question question = new();

    protected async override Task OnParametersSetAsync()
    {
        if (QuestionId != 0)
            question=  await QuestionService.GetQuestionByIdAsync(QuestionId);
    }
    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategoriesAsync();
    }
    private async Task HandleValidSubmit()
    {
        if (QuestionId == 0)
        {
            await QuestionService.AddQuestionAsync(question);            

        }
        else
        {
            await QuestionService.UpdateQuestionAsync(question);            
        }
        NavigateToQuestions();
    }
    void NavigateToQuestions()
    {
     NavigationManager.NavigateTo($"/questions");        
    }


    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }

    void OnInput(string html)
    {
        Console.WriteLine($"Input: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");
    }

    void OnUploadComplete(UploadCompleteEventArgs args)
    {
        Console.WriteLine($"Upload complete: {args.RawResponse}");
    }
}
